{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2","program":"/Users/tanks/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","untrusted","/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=808abc72f4189764","-C","extra-filename=-808abc72f4189764","--out-dir","/Users/tanks/Projects/squares-api/target/rls/debug/deps","-L","dependency=/Users/tanks/Projects/squares-api/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/tanks/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/tanks/Projects/squares-api/target/rls/debug/deps/libuntrusted-808abc72f4189764.rmeta"},"prelude":{"crate_id":{"name":"untrusted","disambiguator":[4953943649442530181,16728885273770826055]},"crate_root":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src","external_crates":[{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":1,"id":{"name":"core","disambiguator":[7813189136024418800,78221803746871164]}},{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16521422805528300375,16247103097443080165]}},{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6928156699021243209,6323046913247974479]}}],"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":770,"byte_end":16553,"line_start":15,"line_end":449,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":770,"byte_end":16553,"line_start":15,"line_end":449,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":67},{"krate":0,"index":78},{"krate":0,"index":76},{"krate":0,"index":73},{"krate":0,"index":70},{"krate":0,"index":13},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":89},{"krate":0,"index":98},{"krate":0,"index":97},{"krate":0,"index":95},{"krate":0,"index":93},{"krate":0,"index":91},{"krate":0,"index":55}],"decl_id":null,"docs":" untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation\n parsing of untrusted inputs in Rust.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations, missing_debug_implementations,)","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4944,"byte_end":5025,"line_start":88,"line_end":91,"column_start":1,"column_end":3}},{"value":"deny(unused_qualifications,)","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5098,"byte_end":5136,"line_start":94,"line_end":96,"column_start":1,"column_end":3}},{"value":"forbid(anonymous_parameters, box_pointers, legacy_directory_ownership,\n         missing_docs, trivial_casts, trivial_numeric_casts, unsafe_code,\n         unstable_features, unused_extern_crates, unused_import_braces,\n         unused_results, variant_size_differences, warnings,)","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5138,"byte_end":5447,"line_start":98,"line_end":112,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5449,"byte_end":5459,"line_start":114,"line_end":114,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":67},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5624,"byte_end":5629,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"Input","qualname":"::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":69}],"decl_id":null,"docs":" A wrapper around `&'a [u8]` that helps in writing panic-free code.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5763,"byte_end":5767,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"from","qualname":"<Input>::from","value":"fn (bytes: &'a [u8]) -> Input<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Input` for the given input `bytes`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6396,"byte_end":6404,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Input>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the input is empty and false otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6375,"byte_end":6384,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6516,"byte_end":6520,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"iter","qualname":"<Input>::iter","value":"fn (&self) -> <&[u8] as IntoIterator>::IntoIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the input.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6495,"byte_end":6504,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6668,"byte_end":6671,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"len","qualname":"<Input>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `Input`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6647,"byte_end":6656,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6918,"byte_end":6926,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Input>::read_all","value":"fn <F, R, E> (&self, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. If `read` does not consume the entire input,\n `incomplete_read` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7366,"byte_end":7378,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"read_all_mut","qualname":"<Input>::read_all_mut","value":"fn <F, R, E> (&self, incomplete_read: E, mut read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Like `read_all`, except taking an `FnMut`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7975,"byte_end":7993,"line_start":182,"line_end":182,"column_start":12,"column_end":30},"name":"as_slice_less_safe","qualname":"<Input>::as_slice_less_safe","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Access the input as a slice so it can be processed by functions that\n are not written using the Input/Reader framework.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7954,"byte_end":7963,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8782,"byte_end":8799,"line_start":209,"line_end":209,"column_start":8,"column_end":25},"name":"read_all_optional","qualname":"::read_all_optional","value":"fn <F, R, E> (input: Option<Input>, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. When `input` is `None`, `read` will be\n called with `None`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10084,"byte_end":10090,"line_start":242,"line_end":242,"column_start":12,"column_end":18},"name":"Reader","qualname":"::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" A read-only, forward-only* cursor into the data in an `Input`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10214,"byte_end":10218,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"Mark","qualname":"::Mark","value":"Mark {  }","parent":null,"children":[{"krate":0,"index":41}],"decl_id":null,"docs":" An index into the already-parsed input of a `Reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10451,"byte_end":10454,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader>::new","value":"fn (input: Input<'a>) -> Reader<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Reader for the given input. Use `read_all`,\n `read_all_mut`, or `read_all_optional` instead of `Reader::new`\n whenever possible.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10430,"byte_end":10439,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10661,"byte_end":10667,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"at_end","qualname":"<Reader>::at_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the reader is at the end of the input, and `false`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10640,"byte_end":10649,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10849,"byte_end":10872,"line_start":269,"line_end":269,"column_start":12,"column_end":35},"name":"get_input_between_marks","qualname":"<Reader>::get_input_between_marks","value":"fn (&self, mark1: Mark, mark2: Mark) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Input` for already-parsed input that has had its boundaries\n marked using `mark`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10828,"byte_end":10837,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11268,"byte_end":11272,"line_start":279,"line_end":279,"column_start":12,"column_end":16},"name":"mark","qualname":"<Reader>::mark","value":"fn (&self) -> Mark","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of the `Reader` for future use in a call\n to `get_input_between_marks`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11247,"byte_end":11256,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11454,"byte_end":11458,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"peek","qualname":"<Reader>::peek","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more byte in the input and that\n byte is equal to `b`, and false otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11796,"byte_end":11805,"line_start":294,"line_end":294,"column_start":12,"column_end":21},"name":"read_byte","qualname":"<Reader>::read_byte","value":"fn (&mut self) -> Result<u8, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input byte.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12249,"byte_end":12253,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"name":"skip","qualname":"<Reader>::skip","value":"fn (&mut self, num_bytes: usize) -> Result<(), EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12618,"byte_end":12636,"line_start":316,"line_end":316,"column_start":12,"column_end":30},"name":"skip_and_get_input","qualname":"<Reader>::skip_and_get_input","value":"fn (&mut self, num_bytes: usize) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input, returning the skipped input as an `Input`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13154,"byte_end":13165,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"skip_to_end","qualname":"<Reader>::skip_to_end","value":"fn (&mut self) -> Input<'a>","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input, returning the skipped input\n as an `Input`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13470,"byte_end":13480,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"EndOfInput","qualname":"::EndOfInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used to indicate the end of the input was reached before the\n operation could be completed.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5679,"byte_end":5684,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8252,"byte_end":8257,"line_start":190,"line_end":190,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8485,"byte_end":8490,"line_start":198,"line_end":198,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10246,"byte_end":10252,"line_start":252,"line_end":252,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13708,"byte_end":13713,"line_start":348,"line_end":348,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5679,"byte_end":5684,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8252,"byte_end":8257,"line_start":190,"line_end":190,"column_start":39,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":67},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8485,"byte_end":8490,"line_start":198,"line_end":198,"column_start":39,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":67},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10246,"byte_end":10252,"line_start":252,"line_end":252,"column_start":10,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tanks/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13708,"byte_end":13713,"line_start":348,"line_end":348,"column_start":14,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}}]}